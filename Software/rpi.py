
  /*
  //Connect to wifi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  for(int i = 0; i < 20; i++){
    if(WiFi.status() == WL_CONNECTED){
      Serial.print("WiFi Connection Established! (IP address: ");Serial.print(WiFi.localIP());Serial.println(")");
      break;
    } else {
      Serial.printf("Attempting WiFi connection (%d)\n",i+1);
    }
    delay(1000);
  }
  if(WiFi.status() != WL_CONNECTED){
    Serial.println("WiFi Connection Error!");
  }

  //configure and sync time
  configTzTime(TIMEZONE, NTP_SERVER);
  //syncRTC();
  */


struct UI{


  uint16_t space[1] = {0};

  uint16_t ascii57[95][5] = {	//7r x 5c
    {0,0,0,0,0},      //" "
    {0,0,95,0,0},		  //!
    {0,3,0,3,0},		  //"
    {20,62,20,62,20},	//#
    {70,73,127,73,49},//$
    {6,102,28,51,48},	//%
    {54,73,81,38,88},	//&
    {0,0,3,0,0},		  //'
    {0,62,65,0,0},		//(
    {0,0,65,62,0},		//)
    {0,5,2,5,0},		  //*
    {0,8,28,8,0},	  	//+
    {0,64,32,0,0},		//,
    {0,8,8,8,0},		  //-
    {0,0,64,0,0},		  //.
    {0,96,28,3,0},		///
    {62,65,65,65,62},	//0
    {0,66,127,64,0},	//1
    {66,97,81,73,70},	//2
    {73,73,73,73,54},	//3
    {15,8,8,127,8},		//4
    {79,73,73,73,49},	//5
    {62,73,73,73,48},	//6
    {1,1,97,25,7},		//7
    {54,73,73,73,54},	//8
    {6,73,73,73,62},	//9
    {0,0,36,0,0},		  //:
    {0,64,36,0,0},		//,
    {0,8,20,34,0},		//<
    {0,20,20,20,0},		//=
    {0,34,20,8,0},		//>
    {2,1,81,9,6},		  //?
    {62,93,85,77,62},	//@
    {126,9,9,9,126},	//A
    {127,73,73,73,54},//B
    {62,65,65,65,34},	//C
    {127,65,65,65,62},//D
    {127,73,73,73,73},//E
    {127,9,9,9,9},		//F
    {62,65,65,73,56},	//G
    {127,8,8,8,127},	//H
    {0,65,127,65,0},	//I
    {32,64,65,65,63},	//J
    {127,8,20,34,65},	//K
    {127,64,64,64,64},//L
    {127,2,4,2,127},	//M
    {127,4,8,16,127},	//N
    {62,65,65,65,62},	//O
    {127,9,9,9,6},		//P
    {62,65,65,33,94},	//Q
    {127,9,9,9,118},	//R
    {70,73,73,73,49},	//S
    {1,1,127,1,1},		//T
    {63,64,64,64,63},	//U
    {7,56,64,56,7},		//V
    {127,32,28,32,127},	//W
    {99,20,8,20,99},	//X
    {3,4,120,4,3},		//Y
    {97,81,73,69,67},	//Z
    {0,127,65,0,0},		//[
    {0,3,28,96,0},		// "\"
    {0,0,65,127,0},		//]
    {0,2,1,2,0},		  //^
    {0,64,64,64,0},		//_
    {0,0,1,2,0},		  //`
    {32,84,84,84,120},//a
    {127,72,72,72,48},//b
    {48,72,72,72,0},	//c
    {48,72,72,72,127},//d
    {56,84,84,84,24},	//e
    {0,126,5,1,0},		//f
    {0,76,82,82,44},	//g
    {127,8,8,112,0},	//h
    {0,0,122,0,0},		//i
    {0,32,64,64,58},	//j
    {127,16,108,0,0},	//k
    {0,63,64,0,0},		//l
    {112,8,112,8,112},//m
    {0,112,8,112,0},	//n
    {48,72,72,48,0},	//o
    {0,124,36,24,0},	//p
    {0,28,20,124,64},	//q
    {0,112,8,8,0},		//r
    {0,88,84,52,0},		//s
    {0,4,62,68,0},		//t
    {0,56,64,64,56},	//u
    {0,56,64,56,0},		//v
    {56,64,56,64,56},	//w
    {68,40,16,40,68},	//x
    {0,92,80,124,0},	//y
    {0,98,82,74,70},	//z
    {0,8,54,65,0},		//{
    {0,0,127,0,0},		//|
    {0,65,54,8,0},		//}
    {8,4,8,16,8},		  //~
  };

  uint16_t largeTime[13][10] = {		                            //14r x 10c
    {4092,8190,14343,12291,12291,12291,12291,14343,8190,4092},	//0
    {0,12300,12302,12303,16383,16383,12288,12288,12288,0},	  	//1
    {0,14342,15367,15875,14083,13187,12739,12543,12414,0},	  	//2
    {0,6150,14343,12291,12483,12483,12483,14535,8190,3900},	  	//3
    {127,255,192,192,192,192,192,16383,16383,192},			        //4
    {12415,12415,12387,12387,12387,12387,12387,14563,8131,3971},//5
    {4094,8191,14563,12387,12387,12387,12387,14563,8135,3974},	//6
    {3,3,3,3,14339,16131,1987,243,63,15},					             	//7
    {3868,8190,14823,12483,12483,12483,12483,14823,8190,3900},	//8
    {60,6270,14567,12483,12483,12483,12483,14567,8190,4092},	  //9
    {0,0,0,0,1560,1560,0,0,0,0},						                		//:
    {0,3584,2560,1536,0,3584,512,3584,512,3584},			        	//am
    {0,15872,2560,3584,0,3584,512,3584,512,3584},		        		//pm
  };

  void writeLine(char * text, bool line = 0){
    uint8_t c = 0;
    uint8_t yLow = line*8;
    uint8_t yHigh = line*8+8;
    for(int16_t i = 0; i<strlen(text) && i<18; i++){
      int8_t charI = text[i]-32;
      if((charI >= 0) && (charI < 95)){
        display.write(ascii57[charI], 5, c, yLow, yHigh);
        c+=5;
        display.write(space, 1, c++, yLow, yHigh);
      }
    }
  }

  void writeTime(uint8_t hour, uint8_t minute, uint8_t c = 0, bool alignLeft = true, bool mt = false){
    uint8_t t[6] = {hour / 10, hour % 10, 10, minute / 10, minute % 10, 11+(hour>=12)};
    int8_t s = 0;
    if(!mt){
      if(hour > 12){t[0]-=1;t[1]-=2;} 
      else if(hour == 0){t[0]=1;t[1]+=2;}
      if(t[0] == 0){s = 1;}
    }
    if(alignLeft){
      c+=10;
      for(int8_t d = 5-mt; d >= s; d--){
        display.write(largeTime[t[d]], 10, display.numCols-c, 1, 15);
        c+=10;
        display.write(space, 1, display.numCols-c++, 0, 16);
      }
    } else {
      for(int8_t d = s; d <= 5-mt; d++){
        display.write(largeTime[t[d]], 10, c, 1, 15);
        c+=10;
        display.write(space, 1, c++, 0, 16);
      }
    }
  }

  void clearLine(bool line = 0, bool largeLetters = 0){
    Serial.println("TODO");
  }

} ui;


/*
struct tm localTime;
void syncRTC(){
  if(WiFi.status() == WL_CONNECTED && getLocalTime(&localTime)){
    RTC.adjust(DateTime(localTime.tm_year+1900, localTime.tm_mon+1, localTime.tm_mday, localTime.tm_hour, localTime.tm_min, localTime.tm_sec));    //update RTC
    Serial.println(&localTime, "Synced RTC: %A, %B %d %Y %H:%M:%S");
  } else if (WiFi.status() != WL_CONNECTED) {
    Serial.println("ERROR: wifi is not connected OR there was a problem getting new time!");
  }
}
*/